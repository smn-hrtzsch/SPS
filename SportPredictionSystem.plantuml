@startuml PredictionGame
abstract class Match {
    + uint MatchID {get;}
    - static uint MatchIDCounter = 0
    + DateTime MatchDate {get;}
    + string? ResultTeam1 {get;}
    + string? ResultTeam2 {get;}
    + Match(string PathToMatchDataCsvFile)
    - string[] GetMatchDataFromCsvFile(string PathToMatchDataCsvFile, uint MatchID)
}

enum ScheduleTypes{
    Normal
    KO
    KO_first_leg
    KO_second_leg
    Semifinal
    Final
}

class FootballMatch extends Match {
    + string HomeTeam {get;}
    + string AwayTeam {get;}
    - ScheduleTypes match_type {get;}
    + FootballMatch(string PathToMatchDataCsvFile) : base (PathToMatchDataCsvFile)
}

class Member {
    + uint MemberID {get;}
    - static uint MemberIDCounter = 0
    - string? forename {get; set;}
    - string? surname {get; set;}
    - string EmailAddress {get; set;}
    - List<Schedules> ParticipatingSchedules
    - List<T> PredictionsToDo where T: Prediction
    - List<Score> Scores
    + Member(string forename, string surname, string EmailAddress)
    + void AddSchedule(uint ScheduleID)
    + void RemoveSchedule(uint ScheduleID)
    + void AddPrediction(uint PredictionID)
    + void RemovePrediction(uint PredictionID)
    + Prediction SearchPrediction(uint PredictionID)
    + void AddScore(uint ScoreID)
    + void RemoveScore(uint ScoreID)
}

abstract class Prediction {
    + uint PredictionID {get;}
    - static uint PredictionIDCounter = 0
    + uint MemberID {get;}
    + uint MatchID {get;}
    + DateTime PredictionDate {get;}
    + Prediction(uint MemberID, uint MatchID)
    + bool ValidatePrediction()
}

class FootballPrediction extends Prediction {
    - uint PredictionHome {get; set;}
    - uint PredictionAway {get; set;}
    + FootballPrediction(uint MemberID, uint MatchID, uint PredictionHome, uint PredictionAway) : base (MemberID, MatchID)
    + void ChangePrediction(uint? PredictionHome, uint? PredictionAway, uint PredictionID)
}

enum ScheduleTypes {
    EM_2024
}

class Schedule {
    + ScheduleTypes ScheduleID {get;}
    + List<T> Matches where T: Match {get;}
    + List<T> MatchesOnDay where T: Match {get;}
    + Schedule(ScheduleTypes schedule_type, string PathToCsvFile)
    + List<Match> GetMatchesFromCsvFile(string PathToCsvFile, ScheduleTypes schedule_type)
    + List<Match> GetMatchesOnDay(string date)
}

class Score {
    + uint ScoreID {get;}
    - static uint ScoreIDCounter = 0
    - ScheduleTypes PredictedSchedule {get;}
    - uint AmountOfPoints {get;}
    + Score(ScheduleTypes PredictedSchedule)
    + int CalculateScore(ScheduleTypes PredictedSchedule, int PredictionID)
}

class EmailService {
    - string SmtpServer {get; set;}
    - int SmtpPort {get; set;}
    - string Username {get; set;}
    - string Password {get; set;}
    + EmailService(string SmtpServer, int SmtpPort, string Username, string Password)
    + void SendEmail(string recipient, string subject, string content)
}

class PredictionGame {
    + uint PredictionGameID {get;}
    - static uint PredictionGameIDCounter = 0
    - List<Member> Members {get; set;}
    + List<ScheduleTypes> ScheduleTypes {get;}
    - EmailService email_service {get; set;}
    + PredictionGame(EmailService email_service)
    + void Register(Member member)
    + void Unsubscribe(int MemberID)
    + void SendDailyEmail()
}

Member "1" -- "0..*" FootballPrediction : creates
Member "1" -- "0..*" Score : includes
Member "1" -- "0..*" Schedule : chooses
FootballMatch "1" -- "1" FootballPrediction : has
Schedule "1" -- "0..*" FootballMatch : includes
PredictionGame "1" -- "0..*" Member : manages
PredictionGame "1" -- "1" Schedule : uses
PredictionGame "1" --> "1" EmailService : uses and needs
PredictionGame "1" --> "1" ScheduleTypes : uses
ScheduleTypes "1" -- "1" FootballMatch : uses
Schedule "1" -- "1" ScheduleTypes : uses
Score "1" -- "1" ScheduleTypes : uses
Score "1" <-- "1" FootballPrediction : needs
FootballPrediction "1" <-- "1" Score : gets awarded
@enduml
